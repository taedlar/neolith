# [ $Id: neolith.conf,v 1.2 2002/11/25 11:11:05 annihilator Exp $ ]
#
# 檔案：neolith.conf
#
# 這個檔案是 Neolith 的執行時段組態檔(Runtime Configuration)，在預設的情況
# Neolith 會企圖從 /etc/neolith.conf 讀取這個檔案，你可以在執行 Neolith 時
# 使用 -f 選項指定特定的組態檔。
#
# 在組態檔中凡是只含有空白字元，或第一個非空白字元為 '#' 的一整列都會被忽
# 略。所有的組態設定項目都由一個不包含空白字元的名稱，後面接著至少一個的空
# 白字元，後面接著設定值本身所構成。關於各組態設定項目的說明，請參考以下註
# 解中的說明。
#
# Copyright (C) 2001 Minxin Zhang <annihilator@muds.net>
#
# 授權：
#	PUBLIC DOMAIN - 你可以任何方式使用、修改、複製、散佈這個檔案而無需
#	徵求作者同意。

# 設定項目：	MudName
# 必要性：	可有可無 
# 預設值：	未定義
#
# 設定 Mud 的名稱。這個名稱的值可以經由 LPC 中 MUD_NAME 這個識別字取得。
#
# 註：在未來的 Neolith 版本中會移除這個設定項目，如果你需要這個項目的話，建
#     議利用 GlobalInclude 檔定義。

#MudName		東方故事II

# 設定項目：	Port
# 必要性：	至少一個
#
# 指定 Neolith 要在哪些 TCP 埠等候使用者連線，這個設定項目可以出現多次，讓
# Neolith 同時在數個 TCP 埠等候，目前最多可以設定達 5 個。每個 TCP 埠可支援
# 一個子協定，以一個冒號(:)隔開接在埠號後面，目前支援的子協定的有：
#
#	telnet	- 	即最常用的 TELNET 協定，主要用於一般使用者連線
#	ascii	-	7-bit 的文字模式連線 (未來可能移除)
#	binary	-	不經過任何處理的純 TCP 連線
#

Port		5000:telnet

# 設定項目：	MudlibDir
# 必要性：	必需
#
# 指定 Mudlib 所在的最上層目錄，這個目錄必須以絕對路徑的方式指定。

MudlibDir	/home/es2/mudlib

# 設定項目：	LogDir
# 必要性：	可有可無
# 預設值：	MudlibDir
#
# 指定 Neolith 在寫入 Log 檔時的預設目錄。和 MudOS 不同的是：如果你需要指定
# 這個路徑，你必須使用絕對路徑，而非相對於 MudlibDir 的路徑。如果你將這個目
# 錄放在 mudlib 目錄以外，可以保護 log 檔不被 MUD 的使用者看見或修改。

LogDir		/home/es2/mudlib/log

# 設定項目：	DebugLogFile
# 必要性：	可有可無
#
# 指定 Neolith 將伺服器產生的錯誤訊息寫入特定檔案。若不指定這個項目，這些錯
# 誤訊息會被寫入 stderr，你可以用管線將之導入某一檔案以達到類似效果。但在使
# 用外部工具(如 logrotate)管理 Log 檔時，使用 DebugLogFile 來指定 Log檔能夠
# 讓 Neolith 在發現該檔案被移除的時候，重新產生一個 Log檔，以免遺失重要的訊
# 息。

DebugLogFile	debug.log

# 設定項目：	LogWithDate
# 必要性：	可有可無
# 預設值：	No
#
# 這個選項會讓 Neolith 在所有的 debug log 訊息前面加上日期時間(ISO 8601 格
# 式)，這是 Neolith 的新功能。

LogWithDate		yes

# 設定項目：	CrashDropCore
# 必要性：	可有可無
# 預設值：	Yes
#
# 這個選項可以指定 Neolith 在發生不正常結束時，是否要產生 core dump。這是
# Neolith 的新功能。

CrashDropCore		No

# 設定項目：	IncludeDir
# 必要性：	必需
#
# 指定編譯 LPC 程式時的 header 檔搜尋路徑, 您可以用 ':' 分隔, 指定超過一個
# 的目錄名稱作為搜尋路徑。

IncludeDir	/include

# 設定項目：	GlobalInclude
# 必要性：	可有可無
# 預設值：	不使用
#
# 指定編譯所有 LPC 程式時都要 #include 進來的 header 檔檔名。檔名的寫法與
# 程式中 #include 的寫法相同。不指定這個檔名時, neolith 不會自動 #include
# 任何 header 檔。
#
# 設計 mudlib 時可以將一些全域性的符號定義在這個 header 檔中, 讓所有 LPC
# 程式都能使用。

GlobalInclude	<globals.h>

# 設定項目：	SaveBinaryDir
# 必要性：	必需
#
# 指定 neolith 在處理 #pragma save_binary 時儲存 LPC 編譯過後的二進位碼檔
# 的路徑。

SaveBinaryDir	/bin

# 設定項目：	MasterFile
# 必要性：	必需
#
# 指定 mudlib 系統 master 物件的 LPC 程式檔名。master 物件是一個 mudlib
# 中的最高特權物件, 控制使用者從登入 mud, 存取檔案, 到使用各種資源的許可
# 權。關於 master 物件的功能, 請參考其他相關說明文件。

MasterFile	/adm/obj/master.c

# 設定項目：	SimulEfunFile
# 必要性：	可有可無
# 預設值：	不使用
#
# 指定 mudlib 系統 simul efun 物件的 LPC 程式檔名。simul efun 物件嚴格來
# 說並不算是物件, 但是所有定義在 simul efun 中的函式在 mudlib 中都可以被
# 當成 efun 來使用。換句話說, mudlib 可以在 simul efun 中提供各式各樣的
# 函數來模擬 efun, 而無須修改 neolith。
#
# simul efun 典型的用途除了提供 mudlib 程式設計師 neolith 不提供的 efun
# 之外, 還常常藉由改寫與真正 efun 同名的函式, 用來保護一些特定的 efun。
# 例如 mudlib 設計者可以在 simul efun 中提供一個 destruct(), 用來取代
# neolith 本身的 destruct(), 藉以管理所有物件摧毀其他物件的行為。

SimulEfunFile	/adm/obj/simul_efun.c

# 設定項目：	DefaultErrorMsg
# 必要性：	可有可無
# 預設值：	不使用
#
# 指定預設的錯誤提示訊息。當使用者的命令導致一個 LPC 執行時段錯誤時, 會
# 將這段訊息顯示給該使用者。

DefaultErrorMsg		You found something with the world!

# 設定項目：	DefaultFailMsg
# 必要性：	可有可無
# 預設值：	不使用
#
# 指定預設的命令錯誤訊息。當使用者的命令無法被使用者物件, 使用者所在的房
# 間, 身上或附近的物件處理時 (例如, 使用者拼錯字), 系統會顯示這段訊息給
# 使用者。但如果程式中曾經用 notify_fail 修改過命令錯誤提示, neolith 會
# 使用修改過的訊息。

DefaultFailMsg		What?

# 設定項目：	CleanupDuration
# 必要性：	可有可無
# 預設值：	600
#
# 指定物件在未被使用多久 (單位: 秒) 之後, neolith 會呼叫物件的 clean_up()
# 方法以檢查該物件是否可以被清除。
#
# 如果不設定這個時間, 預設值是 10 分鐘。對大多數的 mud 而言, 10 分鐘應該
# 都是適當的設定, 如果您用來執行 neolith 的電腦記憶體較少, 可以將這個時間
# 設定短一點, 以讓 neolith 更積極地進行記憶體回收。

CleanupDuration		600

# 設定項目：	ResetDuration
# 必要性：	可有可無
# 預設值：	1800
#
# 指定 neolith 要每隔幾秒呼叫一次物件的重置程序 reset()。
#
# 物件的重置在 mud 中主要用來讓房間重新產生被殺死的怪物或被取走的寶物, 一
# 般而言這個設定隨您的 mud 玩家「密度」(同時上線人數與房間數的比值)而調整,
# 當玩家多而房間少時, 您通常會希望將重置的時間縮短, 以便玩家不需要花太多時
# 間等候怪物重生。
#
# 以 ES2 的規模而言, 同時上線人數 200 人左右, 房間數約 6000, 重置時間設定
# 為半小時。

ResetDuration		1800

# 設定項目：	MaxInheritDepth
# 必要性：	可有可無
# 預設值：	30
#
# 指定 neolith 允許 LPC 物件最大的繼承深度。原則上繼承深度越深的 mudlib,
# 其函數呼叫時所需的搜尋時間越長, 良好的物件階層設計可以將物件繼承的深度
# 控制在一定的階層之內。
#
# ES2 為典型的的扁平式物件階層架構, 繼承深度一般不會超過 5 層。

MaxInheritDepth		30

# 設定項目：	MaxEvaluationCost
# 必要性：	可有可無
# 預設值：	1000000
#
# 指定 neolith 允許一個 LPC 函數執行的最大指令數。由於不同的 LPC 程式編譯
# 過後的指令數不同, 程式執行時因迴圈, 分支等狀況也會使執行指令數增加, 因此
# 需要的最大指令數會有所不同。
#
# 一般而言遊戲制度越複雜, 變化越多的 mud 會需要越多的最大指令數, 以 ES2 目
# 前的規模而言, 執行多數的玩家命令所需的指令數大平均在 5000 左右, 但因為某
# 些巫師命令或系統管理者的命令需要, 您可能會需要較大的最大指令數。

MaxEvaluationCost	1000000

# 設定項目：	MaxArraySize	(預設值 15000)
#		MaxBufferSize	(預設值 4000000)
#		MaxMappingSize	(預設值 15000)
#		MaxStringSize	(預設值 200000)
#		MaxBitFieldBits	(預設值 1200)
# 必要性：	可有可無
#
# 指定各種 LPC 資料型態的最大容量, 您可以視需要調整這些值, 或使用 neolith
# 的預設值。

MaxArraySize		15000
MaxMappingSize		15000
MaxBufferSize		400000
MaxStringLength		200000
MaxBitFieldBits		1200

# 設定項目：	MaxByteTransfer	(預設值 10000)
#		MaxReadFileSize	(預設值 200000)
# 必要性：	可有可無
#
# 指定 LPC 程式中從檔案或 socket 中讀取資料一次最多的讀取量。

MaxByteTransfer		10000
MaxReadFileSize		200000

# 設定項目：	SharedStringHashSize	(預設值 20011)
#		ObjectHashSize		(預設值 10007)
# 必要性：	可有可無
#
# 指定 neolith 中管理字串、物件等資料結構的雜湊表大小。
# 原則上這個大小應該使用一個夠大的質數, 以降低碰撞的機率。

SharedStringHashSize	20011
ObjectHashSize		10007

# 設定項目：	StackSize
# 必要性：	可有可無
# 預設值：	1000
#
# 指定 neolith 執行 LPC 程式時堆疊的大小。
# 
# 執行 LPC 程式時, 函式的參數, 區域變數都會存放在堆疊中。
# 原 MudOS 此項設定位於 options.h, neolith 將之改為組態設定項目, 無須重新
# 編譯。

StackSize	1000

# 設定項目：	MaxLocalVariables
# 必要性：	可有可無
# 預設值：	25
#
# 指定每個 LPC 程式最多可以宣告多少個區域變數。
# 原 MudOS 此項設定位於 options.h, neolith 將之改為組態設定項目, 無須重新
# 編譯。

MaxLocalVariables	25

# 設定項目：	MaxCallDepth
# 必要性：	可有可無
# 預設值：	50
#
# 指定每個 LPC 程式最大呼叫深度。如果您經常使用遞迴, 可以提高這個深度
# 以免 neolith 將某些遞迴呼叫視為無窮迴圈而回報錯誤。
# 原 MudOS 此項設定位於 options.h, neolith 將之改為組態設定項目, 無須重新
# 編譯。

MaxCallDepth	50

# 設定項目：	ArgumentsInTrace	(預設值 No)
#		LocalVariablesInTrace	(預設值 No)
# 必要性：	可有可無
#
# 指定 neolith 在 LPC 程式發生錯誤時, 是否要將函式參數或區域變數放在
# trace 訊息 (及傳給 error_handler 的 mapping 結構) 中。
# 關閉這個選項可以讓您的 log 訊息短一些, 打開則可以在偵錯時有更多資訊可供
# 利用。
# 
# 原 MudOS 此項設定位於 options.h, neolith 將之改為組態設定項目, 無須重新
# 編譯。

ArgumentsInTrace	Yes
LocalVariablesInTrace	Yes
